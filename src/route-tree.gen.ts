/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as RankingRouteImport } from './routes/ranking'
import { Route as BiancaRouteImport } from './routes/bianca'
import { Route as AuthGuardedRouteImport } from './routes/_auth-guarded'
import { Route as SignInIndexRouteImport } from './routes/sign-in/index'
import { Route as RegisterIndexRouteImport } from './routes/register/index'
import { Route as AuthGuardedIndexRouteImport } from './routes/_auth-guarded/index'
import { Route as UsersNicknameRouteImport } from './routes/users/$nickname'
import { Route as AuthGuardedStoreRouteImport } from './routes/_auth-guarded/store'
import { Route as AuthGuardedMeRouteRouteImport } from './routes/_auth-guarded/me/route'
import { Route as UsersIdUserIdRouteImport } from './routes/users/id/$userId'

const RankingRoute = RankingRouteImport.update({
  id: '/ranking',
  path: '/ranking',
  getParentRoute: () => rootRouteImport,
} as any)
const BiancaRoute = BiancaRouteImport.update({
  id: '/bianca',
  path: '/bianca',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthGuardedRoute = AuthGuardedRouteImport.update({
  id: '/_auth-guarded',
  getParentRoute: () => rootRouteImport,
} as any)
const SignInIndexRoute = SignInIndexRouteImport.update({
  id: '/sign-in/',
  path: '/sign-in/',
  getParentRoute: () => rootRouteImport,
} as any)
const RegisterIndexRoute = RegisterIndexRouteImport.update({
  id: '/register/',
  path: '/register/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthGuardedIndexRoute = AuthGuardedIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthGuardedRoute,
} as any)
const UsersNicknameRoute = UsersNicknameRouteImport.update({
  id: '/users/$nickname',
  path: '/users/$nickname',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthGuardedStoreRoute = AuthGuardedStoreRouteImport.update({
  id: '/store',
  path: '/store',
  getParentRoute: () => AuthGuardedRoute,
} as any)
const AuthGuardedMeRouteRoute = AuthGuardedMeRouteRouteImport.update({
  id: '/me',
  path: '/me',
  getParentRoute: () => AuthGuardedRoute,
} as any)
const UsersIdUserIdRoute = UsersIdUserIdRouteImport.update({
  id: '/users/id/$userId',
  path: '/users/id/$userId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/bianca': typeof BiancaRoute
  '/ranking': typeof RankingRoute
  '/me': typeof AuthGuardedMeRouteRoute
  '/store': typeof AuthGuardedStoreRoute
  '/users/$nickname': typeof UsersNicknameRoute
  '/': typeof AuthGuardedIndexRoute
  '/register': typeof RegisterIndexRoute
  '/sign-in': typeof SignInIndexRoute
  '/users/id/$userId': typeof UsersIdUserIdRoute
}
export interface FileRoutesByTo {
  '/bianca': typeof BiancaRoute
  '/ranking': typeof RankingRoute
  '/me': typeof AuthGuardedMeRouteRoute
  '/store': typeof AuthGuardedStoreRoute
  '/users/$nickname': typeof UsersNicknameRoute
  '/': typeof AuthGuardedIndexRoute
  '/register': typeof RegisterIndexRoute
  '/sign-in': typeof SignInIndexRoute
  '/users/id/$userId': typeof UsersIdUserIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_auth-guarded': typeof AuthGuardedRouteWithChildren
  '/bianca': typeof BiancaRoute
  '/ranking': typeof RankingRoute
  '/_auth-guarded/me': typeof AuthGuardedMeRouteRoute
  '/_auth-guarded/store': typeof AuthGuardedStoreRoute
  '/users/$nickname': typeof UsersNicknameRoute
  '/_auth-guarded/': typeof AuthGuardedIndexRoute
  '/register/': typeof RegisterIndexRoute
  '/sign-in/': typeof SignInIndexRoute
  '/users/id/$userId': typeof UsersIdUserIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/bianca'
    | '/ranking'
    | '/me'
    | '/store'
    | '/users/$nickname'
    | '/'
    | '/register'
    | '/sign-in'
    | '/users/id/$userId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/bianca'
    | '/ranking'
    | '/me'
    | '/store'
    | '/users/$nickname'
    | '/'
    | '/register'
    | '/sign-in'
    | '/users/id/$userId'
  id:
    | '__root__'
    | '/_auth-guarded'
    | '/bianca'
    | '/ranking'
    | '/_auth-guarded/me'
    | '/_auth-guarded/store'
    | '/users/$nickname'
    | '/_auth-guarded/'
    | '/register/'
    | '/sign-in/'
    | '/users/id/$userId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthGuardedRoute: typeof AuthGuardedRouteWithChildren
  BiancaRoute: typeof BiancaRoute
  RankingRoute: typeof RankingRoute
  UsersNicknameRoute: typeof UsersNicknameRoute
  RegisterIndexRoute: typeof RegisterIndexRoute
  SignInIndexRoute: typeof SignInIndexRoute
  UsersIdUserIdRoute: typeof UsersIdUserIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/ranking': {
      id: '/ranking'
      path: '/ranking'
      fullPath: '/ranking'
      preLoaderRoute: typeof RankingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/bianca': {
      id: '/bianca'
      path: '/bianca'
      fullPath: '/bianca'
      preLoaderRoute: typeof BiancaRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth-guarded': {
      id: '/_auth-guarded'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthGuardedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sign-in/': {
      id: '/sign-in/'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof SignInIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/register/': {
      id: '/register/'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth-guarded/': {
      id: '/_auth-guarded/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthGuardedIndexRouteImport
      parentRoute: typeof AuthGuardedRoute
    }
    '/users/$nickname': {
      id: '/users/$nickname'
      path: '/users/$nickname'
      fullPath: '/users/$nickname'
      preLoaderRoute: typeof UsersNicknameRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth-guarded/store': {
      id: '/_auth-guarded/store'
      path: '/store'
      fullPath: '/store'
      preLoaderRoute: typeof AuthGuardedStoreRouteImport
      parentRoute: typeof AuthGuardedRoute
    }
    '/_auth-guarded/me': {
      id: '/_auth-guarded/me'
      path: '/me'
      fullPath: '/me'
      preLoaderRoute: typeof AuthGuardedMeRouteRouteImport
      parentRoute: typeof AuthGuardedRoute
    }
    '/users/id/$userId': {
      id: '/users/id/$userId'
      path: '/users/id/$userId'
      fullPath: '/users/id/$userId'
      preLoaderRoute: typeof UsersIdUserIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface AuthGuardedRouteChildren {
  AuthGuardedMeRouteRoute: typeof AuthGuardedMeRouteRoute
  AuthGuardedStoreRoute: typeof AuthGuardedStoreRoute
  AuthGuardedIndexRoute: typeof AuthGuardedIndexRoute
}

const AuthGuardedRouteChildren: AuthGuardedRouteChildren = {
  AuthGuardedMeRouteRoute: AuthGuardedMeRouteRoute,
  AuthGuardedStoreRoute: AuthGuardedStoreRoute,
  AuthGuardedIndexRoute: AuthGuardedIndexRoute,
}

const AuthGuardedRouteWithChildren = AuthGuardedRoute._addFileChildren(
  AuthGuardedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AuthGuardedRoute: AuthGuardedRouteWithChildren,
  BiancaRoute: BiancaRoute,
  RankingRoute: RankingRoute,
  UsersNicknameRoute: UsersNicknameRoute,
  RegisterIndexRoute: RegisterIndexRoute,
  SignInIndexRoute: SignInIndexRoute,
  UsersIdUserIdRoute: UsersIdUserIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
